<?php
/**
 * File generated by the Sydney_Admin_Generator on the Jan 2, 2010 12:42:02 PM by arnaud@antidot.ca
 */

/**
 * Mapping of the Filfolders table in an object
 * @package Admindb
 * @subpackage ModelGenerated
 */
class FilfoldersOp extends Sydney_Db_Table
{
    public $cacheStructureArray = false;

    /**
     *
     * @param $pid
     * @param $safinstancesId
     * @param int $fileFilesId
     * @param null $checked
     * @param null $usersId
     * @return array|bool
     */
    public function getMultiArrayRelations($pid, $safinstancesId, $fileFilesId = 0, $checked = null, $usersId = null)
    {
        if ($this->cacheStructureArray) {
            $cache = Zend_Registry::get('cache');
        }
        $cacheName = 'FilfoldersOp_getMultiArrayRelations_' . $pid . '_' . $safinstancesId . '_' . $fileFilesId;
        if ($this->cacheStructureArray) {
            $toReturn = $cache->load($cacheName);
        } else {
            $toReturn = false;
        }

        if (!$toReturn) {
            $where = ' safinstances_id = ' . $safinstancesId . ' ';
            $refs = array();
            $list = array();
            foreach ($this->fetchAll($where, 'pagorder') as $f) {
                $data = $f->toArray();
                $thisRef = & $refs[$data['id']];

                $thisRef['parent_id'] = $data['parent_id'];
                $thisRef['label'] = $data['label'];
                $thisRef['id'] = $data['id'];
                $thisRef['isnode'] = $data['isnode'];
                $thisRef['pagorder'] = $data['pagorder'];
                $thisRef['checked'] = false;
                $thisRef['statval'] = 0;

                if ($usersId != null) {
                    $thisRef['statval'] = $this->getstatvalq($data['id'], $usersId);
                }
                if (is_array($checked) && in_array($data['id'], $checked)) {
                    $thisRef['checked'] = true;
                }

                if ($fileFilesId > 0) {
                    $foldersDb = new FilfoldersFilfiles();
                    $where = 'filfolders_id = ' . $data['id'] . ' AND filfiles_id = ' . $fileFilesId . ' ';
                    if (count($foldersDb->fetchAll($where)) == 1) {
                        $thisRef['checked'] = true;
                    }
                }

                if ($data['parent_id'] <= 0) {
                    $list[$data['id']] = & $thisRef;
                } else {
                    $refs[$data['parent_id']]['children'][$data['id']] = & $thisRef;
                }
            }
            if ($pid > 0 && isset($list[$pid]) && isset($list[$pid]['children'])) {
                $toReturn = $list[$pid]['children'];
            } else {
                $toReturn = $list;
            }
            if ($this->cacheStructureArray) {
                $cache->save($toReturn, $cacheName);
            }
        }

        return $toReturn;
    }

    /**
     * Returns the row containing the system folder for the current safinstance
     *
     * @return null|Zend_Db_Table_Row_Abstract
     */
    private function getSystemFolder()
    {
        $select = $this->select()
            ->where('label = ?', 'system')
            ->where('safinstances_id = ?', Sydney_Tools::getSafinstancesId())
            ->where('isSystemFolder = ?', 1);

        return $this->fetchRow($select);
    }

    /**
     *
     * @param $label
     * @return bool|mixed|string
     */
    public function addSystemFolder($label)
    {
        // get the system folder row
        $rowSystemFolder = $this->getSystemFolder();
        // if it does not exist, we create it
        if (!isset($rowSystemFolder)) {
            $data = array(
                'label'           => 'system',
                'isSystemFolder'  => 1,
                'parent_id'       => 0,
                'safinstances_id' => Sydney_Tools::getSafinstancesId()
            );
            if ($this->insert($data)) {
                $rowSystemFolder = $this->getSystemFolder();
            }
        }
        // if it is set (or has been created)
        if (isset($rowSystemFolder)) {

            $data = array(
                'label'           => $label,
                'isSystemFolder'  => 1,
                'parent_id'       => $rowSystemFolder->id,
                'safinstances_id' => Sydney_Tools::getSafinstancesId()
            );
            // fetch the row if exists
            $where = '';
            foreach ($data as $k => $v) {
                $where .= " $k = '" . $v . "' AND ";
            }
            $zerow = $this->fetchRow($where . ' 1 = 1 ');
            if (!isset($zerow)) {
                return $this->insert($data);
            } else {
                return $zerow->id;
            }
        }

        return false;
    }

    /**
     *
     * @param $moduleName
     * @return bool|Zend_Db_Table_Row_Abstract
     */
    public function getFoldersByModule($moduleName)
    {
        $select = $this->select()
            ->where('label = ?', $moduleName)
            ->where('isSystemFolder = ?', 1)
            ->where('safinstances_id = ?', Sydney_Tools::getSafinstancesId())
            ->limit(1);
        $r = $this->fetchAll($select);
        if (count($r) == 1) {
            return $r->current();
        } else {
            // create new cat
            if ($this->addSystemFolder('adminpeople')) {
                return $this->getFoldersByModule($moduleName);
            }
        }

        return false;
    }

    /**
     *
     * @param int $fileFoldersId
     * @param int $usersId
     * @return int
     */
    private function getstatvalq($fileFoldersId = 127, $usersId = 1)
    {
        $sql = "SELECT
				 count(*) AS amount
				FROM
				 aboactionslog, filfiles, filfolders, filfolders_filfiles
				WHERE
				 aboactionslog.filfiles_id = filfiles.id
				 AND filfolders_filfiles.filfiles_id = filfiles.id
				 AND aboactionslog.users_id = '" . $usersId . "'
				 AND aboactionslog.aboactions_id IN (4,5)
				 AND filfolders_filfiles.filfolders_id = '" . $fileFoldersId . "'
				GROUP BY filfolders_filfiles.filfolders_id
				";
        $r = $this->_db->fetchAll($sql);
        if (count($r) == 1) {
            return $r[0]['amount'];
        } else {
            return 0;
        }
    }

    /**
     *
     * @param $position
     * @param $id
     * @param int $parent
     * @return $this
     */
    public function setPosition($position, $id, $parent = 0)
    {
        $data = array();
        if ($id > 0) {
            $data['pagorder'] = $position;
            $data['parent_id'] = $parent;
            $this->update($data, 'id = ' . $id);
        }

        return $this;
    }

    /**
     * Returns a flat array with keys as keys and label as value.
     *
     * @param int $limit Do not return more entries that this number (default is 300)
     * @return Array list of labels with the ID as key
     */
    public function fetchAlltoFlatArray($limit = 300, $where = ' 1=1 ')
    {
        return $this->rowset_to_flat_array($this->fetchAll($this->select()->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())->limit($limit))->toArray());
    }

    /**
     * Return a structured array containing categories (or folders)
     *
     * @param int $parentId From this ID
     * @param string $whereFile Optional where clause
     * @param boolean $showSystem Should we include the system category?
     * @param boolean $numberFilesPerFolders Include the number of files per folders?
     * @param int $safinstanceId The safinstance id
     * @param bool $firstCall
     * @return array
     */
    public function getFoldersStructure($parentId = 0, $whereFile = null, $showSystem = false, $numberFilesPerFolders = true, $safinstanceId = null, $firstCall = true)
    {
        $toReturn = array();
        $whereAdd = '';
        if ($safinstanceId == null) {
            $safinstanceId = Sydney_Tools::getSafinstancesId();
        }

        $whereCurrent = " id = '" . $parentId . "' AND safinstances_id = '" . ($safinstanceId) . "' ";
        $where = " parent_id = '" . ($parentId) . "' AND safinstances_id = '" . ($safinstanceId) . "' ";

        if (!$showSystem && $parentId == 0) {
            $whereAdd .= " AND label != 'system' ";
        } elseif (!$showSystem) {
            $whereAdd .= " AND isSystemFolder = 0 ";
        }

        if ($whereFile != null) {
            $whereAdd .= ' AND ' . $whereFile;
        }

        $toReturn = $this->fetchAll($where . $whereAdd, 'pagorder')->toArray();
        // get kids
        for ($i = 0; $i < count($toReturn); $i++) {
            if ($numberFilesPerFolders) {
                $toReturn[$i]['nbfiles'] = $this->_countFilesInFolder($toReturn[$i]['id']);
                //$nbfi += $toret[$i]['nbfiles'];
            } else {
                $toReturn[$i]['nbfiles'] = null;
            }
            $toReturn[$i]['kids'] = $this->getFoldersStructure($toReturn[$i]['id'], $whereFile, $showSystem, $numberFilesPerFolders, $safinstanceId, false);
        }

        if ($firstCall) {
            $Return[0] = array();
            if ($arol = $this->fetchRow($whereCurrent . $whereAdd)) {
                $Return[0] = $arol->toArray();
            }
            $Return[0]['nbfiles'] = $this->_countFilesInFolder($Return[0]['id']);
            $Return[0]['kids'] = $toReturn;

            return $Return;
        } else {
            return $toReturn;
        }
    }

    /**
     *
     * @param $folderId
     * @return mixed
     */
    private function _countFilesInFolder($folderId)
    {
        $filefolders = $this->_db->fetchAll("SELECT COUNT(*) AS cnt FROM filfolders_filfiles WHERE filfolders_id = '" . $folderId . "' ");

        return $filefolders[0]['cnt'];
    }

}
