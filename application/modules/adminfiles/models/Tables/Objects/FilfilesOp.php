<?php
/**
 * File generated by the Sydney_Admin_Generator on the Dec 1, 2009 6:37:43 AM by arnaud@antidot.ca
 */

/**
 * Mapping of the Filfiles table in an object
 * @package Admindb
 * @subpackage ModelGenerated
 */
class FilfilesOp extends Sydney_Db_Table
{

    const FILE_TYPE_PICTURE = 9;

    /**
     * Orders available in the file manager
     * @var array
     */
    public $orders = array(
        0 => 'datemodified',
        1 => 'filename',
        2 => 'fweight',
    );

    /**
     * Register the file and location in the DB for quick search and indexing
     *
     * @param $path        Path to the file
     * @param $fileName    File name on the hard disk
     * @param $fileWeight    Weight in bytes
     * @param $type 3 letters extension
     * @param $usersId
     * @param $safinstancesId
     * @param array $params
     * @param string $desc
     * @return bool|mixed|string    id of the file or false on error
     */
    public function registerFileToDb($path, $fileName, $fileWeight, $type, $usersId, $safinstancesId, $params = array(), $desc = '')
    {
        $fileTypeDb = new Filtype();

        $fileTypeId = 1;
        $fileTypeRow = $fileTypeDb->fetchAll("ext = '" . substr($type, 0, 3) . "'");
        if (count($fileTypeRow) == 1) {
            $fileTypeId = $fileTypeRow[0]->id;
        }

        $data = array(
            //'id'				=> '',
            'label'           => $fileName,
            'desc'            => $desc,
            //'keywords'			=> '',
            'filename'        => $fileName,
            'type'            => $type,
            'fweight'         => $fileWeight,
            //'techdata'			=> $params->calledBy,
            'filtype_id'      => $fileTypeId,
            'users_id'        => $usersId,
            'safinstances_id' => $safinstancesId,
            'datecreated'     => new Zend_Db_Expr('NOW()'),
            'datemodified'    => new Zend_Db_Expr('NOW()')
        );

        $fileFile = new Filfiles();
        $files = $fileFile->fetchAll("filename = '$fileName' AND safinstances_id = '" . $safinstancesId . "' ");
        $countFiles = count($files);
        if ($countFiles == 1 && $params->calledBy == 'adminpeople' && isset($params->peopleId) && $params->peopleId > 0) {
            UsersOp::changeAvatar($params->peopleId, $files[0]['id']);

            return $files[0]['id'];
        } elseif ($countFiles == 1) {
            // Replace action, we should update the DB datas
            $fileId = $files->current()->id;
            if ($fileFile->update($data, 'id=' . $fileId)) {
                Sydney_Db_Trace::add('trace.event.upload_file [' . $data['filename'] . ']', 'adminfiles', Sydney_Tools::getTableName($fileFile), 'uploadfile', $fileId);

                return $files[0]['id'];
            } else {
                return false;
            }
        } elseif ($countFiles == 0) {
            if ($fileId = $fileFile->insert($data)) {
                // #18 - called by module adminpeople In this case, check if the category 'module > system > adminpeople' exist, if yes then link to this else first create new cat and link this new cat.
                if ($params->calledBy == 'adminpeople') {
                    UsersOp::changeAvatar($params->peopleId, $fileId);
                }
                // add categories to file
                if (isset($params->catids)) {
                    $foids = explode(',', $params->catids);
                    $foids2 = array();
                    for ($i = 0; $i < count($foids); $i++) {
                        if ($foids[$i] > 0) {
                            $foids2[] = $foids[$i];
                        }
                    }
                    $fileDb = new FilfoldersFilfiles();
                    $fileDb->setFilfilesLinkedTo($fileId, $foids2);
                }
                Sydney_Db_Trace::add('trace.event.upload_file' . ' [' . $data['filename'] . ']', 'adminfiles', Sydney_Tools::getTableName($fileFile), 'uploadfile', $fileId);

                return $fileId;
            } else {
                return false;
            }

        }
    }

    /**
     * Move a file from the chunks to the final dest
     *
     * @param $fileName
     * @param null $fullpath
     * @param string $chunks
     * @return array
     */
    public function _moveFileFromChunk($fileName, $fullpath = null, $chunks = 'chunks')
    {
        if ($fullpath === null) {
            $fullpath = Sydney_Tools::getAppdataPath() . '/adminfiles/';
        }
        $explodedFileName = explode('.', $fileName);
        $extension = $explodedFileName[(count($explodedFileName) - 1)];
        $dir = Sydney_Tools::getAppdataPath() . '/adminfiles/' . strtoupper($extension);
        $type = strtoupper($extension);
        try {
            $bytes = filesize($fullpath . '/' . $chunks . '/' . $fileName);
        } catch (Exception $e) {
            $bytes = 2;
        }
        if (!is_dir($dir)) {
            mkdir($dir);
        }
        if (file_exists($dir . '/' . Sydney_Medias_Utils::sanitizeFilename($fileName))) {
            $filename2 = uniqid() . '_' . Sydney_Medias_Utils::sanitizeFilename($fileName);
        } else {
            $filename2 = Sydney_Medias_Utils::sanitizeFilename($fileName);
        }
        rename($fullpath . '/' . $chunks . '/' . $fileName, $dir . '/' . $filename2);
        if ($bytes >= 20) {
            return array($dir, $filename2, $bytes, $type);
        }
    }

    /**
     * Moves all the files
     *
     * @param null $fullpath
     * @param $usersId
     * @param $safinstancesId
     * @param string $chunks
     * @param string $desc
     * @param string $returnType
     * @return array    List of files or list of files ids
     */
    public function moveAllChuncks($fullpath = null, $usersId, $safinstancesId, $chunks = 'chunks', $desc = '', $returnType = 'filenames')
    {
        // read the list of files
        $files = array();
        if ($fullpath === null) {
            $fullpath = Sydney_Tools::getAppdataPath() . '/adminfiles/';
        }
        if ($handle = opendir($fullpath . '/' . $chunks . '/')) {
            while (false !== ($file = readdir($handle))) {
                if ($file != "." && $file != ".." && $file != ".svn") {
                    $files[] = $file;
                }
            }
            closedir($handle);
        }
        // do the process
        $fileIds = array();
        foreach ($files as $filename) {
            $server = $this->_moveFileFromChunk($filename, $fullpath, $chunks);
            if (is_array($server)) {
                $fileIds[] = $this->registerFileToDb($server[0], $server[1], $server[2], $server[3], $usersId, $safinstancesId, array(), $desc);
            }
        }
        if ($returnType == 'filenames') {
            return $files;
        } elseif ($returnType == 'fileids') {
            return $fileIds;
        } elseif ($returnType == 'both') {
            return array($fileIds, $files);
        }
    }

    /**
     *
     * @param $id
     * @return null|Zend_Db_Table_Row_Abstract
     */
    public function getFileInfosById($id)
    {
        $select = $this->select();
        $select->where("id = ?", $id);

        return $this->fetchRow($select);
    }

    /**
     * @param $listIds
     * @param string $orderBy
     * @param string $fileType
     * @return array|Zend_Db_Table_Rowset_Abstract
     */
    public function getFileInfosByIdList($listIds, $orderBy = '')
    {
        $myList = Sydney_Tools::flat($listIds);
        if (count($myList) > 0) {
            $select = $this->select()->setIntegrityCheck(false)
                ->from("filfiles")
                ->join(array("u" => "users"), "filfiles.users_id = u.id", array(
                    "fname",
                    "lname"
                ))
                ->where("filfiles.id IN (?)", $myList)
                ->order($orderBy);

            return $this->fetchAll($select, Zend_DB::FETCH_ASSOC);
        } else {
            return array();
        }
    }

    /**
     * Returns a list of files within a category grouped by type, so we can display
     * files having the same name but with different extensions; and show filename + downloadable in format X and Y for eg.
     *
     * @param int $fileFoldersId
     * @param null $safinstancesId
     * @param null $usersId If not null we will get the number of times the user downloaded files
     * @return array
     */
    public function getFilesWithinCatGroupedByName($fileFoldersId = 0, $safinstancesId = null, $usersId = null)
    {
        if ($safinstancesId == null) {
            $safinstancesId = Sydney_Tools::getSafinstancesId();
        }
        $toReturn = array();
        $sql = "SELECT
			filfiles.id,
			filfiles.label,
			filfiles.desc,
			filfiles.filename,
			filfiles.type,
			count(filename) AS nbrtypes,
			SUBSTRING(filename,1,LENGTH(filename)-(LENGTH(SUBSTRING_INDEX(filename, '.', -1))+1)) AS basename,
			0 AS nbrdownloads
		FROM
			filfiles, filfolders_filfiles
		WHERE
			filfiles.id = filfolders_filfiles.filfiles_id AND
			filfolders_filfiles.filfolders_id = '" . ($fileFoldersId) . "' AND
			filfiles.safinstances_id = '" . ($safinstancesId) . "'
		GROUP BY
			basename
		ORDER BY
			label, type
		";
        $i = 0;
        foreach ($this->_db->fetchAll($sql) as $e) {
            if ($e['nbrtypes'] == 1) {
                $toReturn[$i][$e['type']] = $e;
                $toReturn[$i][$e['type']]['nbrdownloads'] = $this->getNumberOfDownloads($toReturn[$i][$e['type']]['id'], $usersId, $safinstancesId);
            } else {
                $toReturn[$i][$e['type']] = $e;
                $ele = preg_split('/\./', $e['filename']);
                $sql2 = "SELECT
					filfiles.id,
					filfiles.label,
					filfiles.desc,
					filfiles.filename,
					filfiles.type,
					1 AS nbrtypes,
					SUBSTRING_INDEX(filename, '.', 1) AS basename,
					0 AS nbrdownloads
				FROM
					filfiles, filfolders_filfiles
				WHERE
					filfiles.id = filfolders_filfiles.filfiles_id AND
					filfolders_filfiles.filfolders_id = '" . ($fileFoldersId) . "' AND
					filfiles.safinstances_id = '" . ($safinstancesId) . "' AND
					filfiles.filename LIKE '" . $ele[0] . "%'
				";
                foreach ($this->_db->fetchAll($sql2) as $e2) {
                    $toReturn[$i][$e2['type']] = $e2;
                    $toReturn[$i][$e2['type']]['nbrdownloads'] = $this->getNumberOfDownloads($toReturn[$i][$e2['type']]['id'], $usersId, $safinstancesId);;
                }
            }
            $i++;
        }

        return $toReturn;
    }

    /**
     * Returns the number of times this file was download by this user for the shopping files module
     *
     * @param $fileFilesId
     * @param null $usersId
     * @param null $safinstancesId
     * @return int
     */
    public function getNumberOfDownloads($fileFilesId, $usersId = null, $safinstancesId = null)
    {
        if ($usersId == null) {
            return 0;
        }
        $toReturn = 0;
        $sql = "SELECT
				  count(shforders_filfiles.filfiles_id) AS nbrdownloads
				FROM shforders_filfiles, shforders
				WHERE
				  shforders_filfiles.shforders_id = shforders.id AND
				  shforders.safinstances_id = '" . $safinstancesId . "' AND
				  shforders_filfiles.filfiles_id = '" . $fileFilesId . "' AND
				  shforders.users_id = '" . $usersId . "'
				GROUP BY shforders_filfiles.filfiles_id";
        $results = $this->_db->fetchAll($sql);
        if (count($results) > 0 && isset($results[0]['nbrdownloads'])) {
            $toReturn = $results[0]['nbrdownloads'];
        }

        return $toReturn;
    }

    /**
     * Gets the files to be displayed in the File Manager
     *
     * @param int $typeSize
     * @param int $desc
     * @param int $order
     * @param $count
     * @param $offset
     * @param $filter
     * @param array $tagsIds
     * @param null $q
     * @param null $safinstancesId
     * @param bool $folderId
     * @return array
     */
    public function getFilesToDisplayInFM($typeSize = 1, $desc = 1, $order = 0, $count, $offset, $filter, $tagsIds = array(), $q = null, $safinstancesId = null, $folderId = false)
    {
        if ($safinstancesId == null) {
            $safinstancesId = Sydney_Tools::getSafinstancesId();
        }
        $filesToReturn = array('files' => array(), 'nbpages' => 0);
        $where = "safinstances_id = '" . $safinstancesId . "' ";
        $order = $this->orders[$order];
        if ($desc == 1) {
            $order .= ' DESC';
        }

        // set the filters
        if ($q != null) {
            $where .= " AND ( label LIKE '%" . $q . "%'
			OR filename LIKE '%" . $q . "%'
			OR `desc` LIKE '%" . $q . "%'
			OR keywords LIKE '%" . $q . "%'
			OR idxcontent  LIKE '%" . $q . "%'
			) ";
        }
        // taking care of the folders
        // $folderid = 5735; $folderid = 0;
        if ($folderId !== false) {
            $idsIn = $this->getIDsOfFilesInCategory($folderId, $safinstancesId);
            $filesToReturn = $this->getFoldersFiles($folderId, $safinstancesId);
            $where .= " AND id IN (" . implode(',', $idsIn) . ") ";
            // return and empty set of files if no files in the folder
            if (is_array($idsIn) && count($idsIn) == 0) {
                return $filesToReturn;
            }
        }

        // @todo: link that to a centralized area for doc type management
        $filters = Sydney_Medias_Utils::$filters;
        $where .= " AND type != 'JSON' ";

        if ($filter > 0 && $filter < 20) {
            $where .= ' AND type IN (\'' . implode("','", $filters[$filter]) . '\') ';
        }
        if (count($tagsIds) > 0) {
            $where .= ' AND id IN (SELECT filfiles_id FROM filfolders_filfiles WHERE filfolders_id IN (' . implode(",", $tagsIds) . ') ) ';
        }

        // sets the number of pages
        $filesToReturn['nbpages'] = ceil(count($this->fetchAll($where)) / $count);
        foreach ($this->fetchAll($where, $order, $count, $offset) as $file) {
            $isTagged = 0;
            $isTaggedSql = "SELECT count(*) AS cnt FROM filfolders_filfiles WHERE filfiles_id = '" . $file->id . "' ";
            $isTaggedResult = $this->_db->fetchRow($isTaggedSql);
            if ($isTaggedResult['cnt'] > 0) {
                $isTagged = 1;
            }

            $stringLenght = 10;
            $user = new Users();
            if (strlen($file->label) <= $stringLenght) {
                $fileName = $file->label;
            } else {
                $fileName = substr($file->label, 0, ($stringLenght - 3)) . '...';
            }
            $filesToReturn['files'][] = array(
                'id'       => $file->id,
                'url'      => '/adminfiles/file/thumb/id/' . $file->id . '/ts/' . $typeSize . '/fn/' . $file->id . '.png',
                'name'     => $fileName,
                'fullname' => $file->label,
                'filename' => $file->filename,
                'info'     => 'Uploaded by ' . $user->getUserName($file->users_id),
                'date'     => $file->datecreated,
                'type'     => $file->type,
                'istagged' => $isTagged,
                'filetype' => 'file',
                'fweight'  => $file->fweight
            );
        }

        return $filesToReturn;
    }

    /**
     * returns the folders list for a specific level/parent_id
     *
     * @param int $parentId
     * @param $safinstancesId
     * @return array
     */
    public function getFoldersFiles($parentId = 0, $safinstancesId)
    {
        $filesToReturn = array('files' => array(), 'nbpages' => 0);
        // folders
        $foldersDb = new Filfolders();

        if ($parentId > 0) {
            $upDb = $foldersDb->find($parentId);
            if (isset($upDb[0])) {
                $filesToReturn['files'][] = array(
                    'id'       => $upDb[0]->parent_id,
                    'url'      => '',
                    'name'     => '..',
                    'fullname' => '..',
                    'filename' => '..',
                    'info'     => 'up to "' . $upDb[0]->label . '"',
                    'date'     => '',
                    'type'     => 'FLD',
                    'istagged' => false,
                    'filetype' => 'folderback'
                );
            }
        }
        if ($parentId == 0) {
            $parentQ = "(parent_id IS NULL OR parent_id = 0)";
        } else {
            $parentQ = "parent_id = '" . $parentId . "' ";
        }

        foreach ($foldersDb->fetchAll($parentQ . " AND safinstances_id = '" . $safinstancesId . "' ", 'label') as $file) {
            $filesToReturn['files'][] = array(
                'id'       => $file->id,
                'url'      => '',
                'name'     => $file->label,
                'fullname' => $file->label,
                'filename' => $file->label,
                'info'     => '',
                'date'     => '',
                'type'     => 'FLD',
                'istagged' => false,
                'filetype' => 'folder'
            );
        }

        return $filesToReturn;
    }

    /**
     * Returns IDs of the files contained in a category
     *
     * @param int $fileFoldersId
     * @param int $safinstancesId
     * @return array
     */
    public function getIDsOfFilesInCategory($fileFoldersId = 0, $safinstancesId)
    {
        $toReturn = array();
        if ($fileFoldersId > 0) {
            $sql = "SELECT filfolders_filfiles.filfiles_id AS id
			FROM
				filfolders_filfiles, filfolders
			WHERE
				filfolders_filfiles.filfolders_id = filfolders.id AND
				filfolders.safinstances_id = '" . $safinstancesId . "' AND
				filfolders.id = '" . $fileFoldersId . "'
			GROUP BY
				filfolders_filfiles.filfiles_id ";
        } else {
            $sql = "SELECT id FROM filfiles WHERE
					filfiles.safinstances_id = '" . $safinstancesId . "' AND
					filfiles.id NOT IN (
				SELECT filfolders_filfiles.filfiles_id
				FROM
					filfolders_filfiles, filfolders
				WHERE
					filfolders_filfiles.filfolders_id = filfolders.id AND
					filfolders.safinstances_id = '" . $safinstancesId . "'
				GROUP BY
					filfolders_filfiles.filfiles_id
				) ";
        }
        foreach ($this->_db->fetchAll($sql) as $e) {
            $toReturn[] = $e['id'];
        }

        return $toReturn;
    }

    /**
     * Move a file from a directory to the final appdata of the webinstance
     * and register it to the DB
     *
     * @param string $filepath Path to the temp files
     * @param string $comment Comment to place in the meta description (for search purpose, for ex the name of the user)
     * @param string $folder The name of the folder to push the files in
     * @return bool|int
     */
    public function fileToFileManager($filepath = '', $comment = '', $folder = 'temp')
    {
        if (!file_exists($filepath)) {
            return false;
        }

        try {
            $fileObj = Sydney_Medias_Filetypesfactory::createfiletype($filepath);
            $newName = uniqid() . '_' . Sydney_Medias_Utils::sanitizeFilename($fileObj->basename . '.' . $fileObj->extension);
            $newPath = Sydney_Tools_Paths::getAppdataPath() . '/adminfiles/' . $fileObj->extension . '/';

            if (!is_dir($newPath)) {
                mkdir($newPath, 0777, true);
            }
            rename($filepath, $newPath . $newName);
            $fileName = $newName;

            $newFileObj = Sydney_Medias_Filetypesfactory::createfiletype($newPath . $newName);
            $fileInfo = $newFileObj->getFileinfo();
            $fileWeight = $fileInfo['general.filesize']; // On récupère la taille du fichier pour pouvoir l'ajouter en DB

            $type = $newFileObj->extension;
            $usersId = Sydney_Tools_User::getUserdata('users_id');

            // @todo TODO we ll have to change that, for now it uploads the file as Arnaud (user id 1) if nothing is defined.
            if ($usersId === false) {
                $usersId = 1;
            }
            $safinstancesId = Sydney_Tools_Sydneyglobals::getSafinstancesId();

            // save the file to DB
            $fileFilesId = $this->registerFileToDb($newPath, $fileName, $fileWeight, $type, $usersId, $safinstancesId, array(), $comment);

            // put them in the right folder
            $filefoldersDb = new Filfolders();
            $filefoldersId = $filefoldersDb->addSystemFolder($folder);
            if ($fileFilesId) {
                $fileCorDb = new FilfoldersFilfiles();
                $fileCor = $fileCorDb->createRow();
                $fileCor->filfolders_id = $filefoldersId;
                $fileCor->filfiles_id = $fileFilesId;
                $fileCor->save();
            }

            // returns the files ids
            return $fileFilesId;
        } catch (Exception $e) {
            Zend_Debug::dump($e->getMessage());

            return false;
        }
    }

    /**
     * Returns an array of IDs and Names of the categories linked to this file
     * not taking into account the safinstance linked to this file
     * (this is useful for images displayed in people that can be shared trough multiple instances)
     *
     * @param $id
     * @return Array
     */
    public function getCategoriesLabels($id)
    {
        $categoryDB = new FilfoldersFilfiles();
        $foldersDb = new Filfolders();
        $idString = implode(',', $categoryDB->getFilfoldersLinkedTo($id));
        if ($idString != '') {
            $where = "id IN (" . $idString . ") ";
        } else {
            return array();
        }
        $toRetun = array();
        foreach ($foldersDb->fetchAll($where) as $element) {
            $toRetun[$element['id']] = $element['label'];
        }

        return $toRetun;
    }

}
