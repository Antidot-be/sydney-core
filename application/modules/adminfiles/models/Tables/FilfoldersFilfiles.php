<?php
/**
 * File generated by the Sydney_Admin_Generator v2.0
 */

/**
 * Mapping of the FilfoldersFilfiles table in an object
 * @package Admindb
 * @subpackage ModelGenerated
 */
class FilfoldersFilfiles extends FilfoldersFilfilesOp
{
    protected $_schema = 'sydney';
    protected $_name = 'filfolders_filfiles';
    protected $_referenceMap = array(
        'Filfolders' => array(
            'columns'       => 'filfolders_id',
            'refTableClass' => 'Filfolders',
            'refColumns'    => 'id'
        ),
        'Filfiles'   => array(
            'columns'       => 'filfiles_id',
            'refTableClass' => 'Filfiles',
            'refColumns'    => 'id'
        ),
    );
    protected $_primary = 'id';

    public $fieldsNames = array(
        'filfolders_id', // bigint()
        'filfiles_id', // bigint()
        'id', // bigint()
    );

    protected $_metadata = array(
        'filfolders_id' => array(
            'SCHEMA_NAME'      => null,
            'TABLE_NAME'       => "filfolders_filfiles",
            'COLUMN_NAME'      => "filfolders_id",
            'COLUMN_POSITION'  => 1,
            'DATA_TYPE'        => "bigint",
            'DEFAULT'          => null,
            'NULLABLE'         => false,
            'LENGTH'           => null,
            'SCALE'            => null,
            'PRECISION'        => null,
            'UNSIGNED'         => null,
            'PRIMARY'          => false,
            'PRIMARY_POSITION' => null,
            'IDENTITY'         => false,
        ),
        'filfiles_id'   => array(
            'SCHEMA_NAME'      => null,
            'TABLE_NAME'       => "filfolders_filfiles",
            'COLUMN_NAME'      => "filfiles_id",
            'COLUMN_POSITION'  => 2,
            'DATA_TYPE'        => "bigint",
            'DEFAULT'          => null,
            'NULLABLE'         => false,
            'LENGTH'           => null,
            'SCALE'            => null,
            'PRECISION'        => null,
            'UNSIGNED'         => null,
            'PRIMARY'          => false,
            'PRIMARY_POSITION' => null,
            'IDENTITY'         => false,
        ),
        'id'            => array(
            'SCHEMA_NAME'      => null,
            'TABLE_NAME'       => "filfolders_filfiles",
            'COLUMN_NAME'      => "id",
            'COLUMN_POSITION'  => 3,
            'DATA_TYPE'        => "bigint",
            'DEFAULT'          => null,
            'NULLABLE'         => false,
            'LENGTH'           => null,
            'SCALE'            => null,
            'PRECISION'        => null,
            'UNSIGNED'         => null,
            'PRIMARY'          => true,
            'PRIMARY_POSITION' => 1,
            'IDENTITY'         => true,
        ),
    );

    /**
     * Returns the list of IDs linked to a "Filfolders"
     *
     * @param Int $id ID of the filfiles
     * @return Array list of IDs
     */
    public function getFilfoldersLinkedTo($id)
    {
        if (preg_match("/[0-9]{1,9}/", $id)) {
            $toreturn = array();
            $rows = $this->fetchAll($this->select()->where('filfiles_id = ?', $id));
            foreach ($rows->toArray() as $v) {
                $toreturn[] = $v['filfolders_id'];
            }

            return $toreturn;
        } else {
            return array();
        }
    }

    /**
     * Sets the data linked to an id in the "Filfolders" table
     *
     * @param Int $id ID of the filfiles
     * @param Array list of IDs
     * @return Boolean true if success and false if there were an error
     */
    public function setFilfoldersLinkedTo($id, array $data)
    {
        if (preg_match("/[0-9]{1,9}/", $id) && is_array($data)) {
            $where = $this->getAdapter()->quoteInto('filfolders_id = ?', $id);
            $this->delete($where);
            foreach ($data as $v) {
                $this->insert(array(
                    'filfolders_id' => $id,
                    'filfiles_id'   => $v
                ));
            }
        } else {
            return false;
        }
    }

    /**
     * Returns the list of IDs linked to a "Filfiles"
     *
     * @param Int $id ID of the filfolders
     * @return Array list of IDs
     */
    public function getFilfilesLinkedTo($id)
    {
        if (preg_match("/[0-9]{1,9}/", $id)) {
            $toreturn = array();
            $rows = $this->fetchAll($this->select()->where('filfolders_id = ?', $id));
            foreach ($rows->toArray() as $v) {
                $toreturn[] = $v['filfiles_id'];
            }

            return $toreturn;
        } else {
            return array();
        }
    }

    /**
     * Sets the data linked to an id in the "Filfiles" table
     *
     * @param Int $id ID of the filfolders
     * @param Array list of IDs
     * @return Boolean true if success and false if there were an error
     */
    public function setFilfilesLinkedTo($id, array $data)
    {
        if (preg_match("/[0-9]{1,9}/", $id) && is_array($data)) {
            $where = $this->getAdapter()->quoteInto('filfiles_id = ?', $id);
            $this->delete($where);
            foreach ($data as $v) {
                $this->insert(array(
                    'filfiles_id'   => $id,
                    'filfolders_id' => $v
                ));
            }
        } else {
            return false;
        }
    }

    public function __construct($id = 0)
    {
        $this->_schema = Sydney_Tools_Sydneyglobals::getConf()->db->params->dbname;
        parent::__construct($id);
    }

}
