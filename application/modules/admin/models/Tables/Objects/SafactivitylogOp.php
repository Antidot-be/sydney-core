<?php
/**
 * File generated by the Sydney_Admin_Generator on the 24 aoÃ»t 2010 15:13:55 by gdemaret@antidot.com
 */

/**
 * Mapping of the Safactivitylog table in an object
 * @package Admindb
 * @subpackage ModelGenerated
 */
class SafactivitylogOp extends Sydney_Db_Table
{
    private $selector = null;
    private $filter = array('user' => 0);

    /**
     *
     * @param unknown_type $dbid
     * @param unknown_type $moduleName
     */
    public static function getAuthorNLastEditorForContent($dbid, $moduleName)
    {
        $oEvents = new Safactivitylog;
        $eventsInfo['firstEvent'] = $oEvents->getFirstEvent($dbid, $moduleName, 'pagdivs')->toHtmlAuthor();
        $eventsInfo['lastEvent'] = $oEvents->getLastEvent($dbid, $moduleName, 'pagdivs')->toHtmlLastEditor();

        return $eventsInfo;
    }

    /**
     * @param int $sinceDay - the number of days since now for get the activities
     * @param string $where2 - String to add to the Where filter
     * @return $this
     */
    public function getLastActivities($nbrActivities = 50, $where2 = '')
    {
        $this->selector = $this->select()
            ->from($this->getTableName())
            ->columns('count(id) as cnt')
            ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId());
        if ($where2 != '') {
            $this->selector->where($where2);
        }
        if ($this->filter['user'] > 0) {
            $this->selector->where('users_id = ' . $this->filter['user']);
        }

        $this->selector = $this->selector->group("YEAR(timestamp)")
            ->group("MONTH(timestamp)")
            ->group("DAY(timestamp)")
            ->group("action")
            ->group("login")
            ->order("timestamp DESC")
            ->limit($nbrActivities);

        return $this;
    }

    /**
     *
     * @param unknown_type $nbrActivities
     */
    public function getLastActivitiesForPage($nbrActivities = 5)
    {
        $this->selector = $this->select()
            ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())
            ->where("module in ('adminpages') AND module_table in ('pagstructure') ");

        $this->selector = $this->selector->order("timestamp DESC");
        $this->selector = $this->selector->limit($nbrActivities);

        return $this;
    }

    /**
     *
     * @param unknown_type $pageId
     * @param unknown_type $nbrActivities
     */
    public function getLastActivitiesForContentPage($pageId, $nbrActivities = 5)
    {
        if (is_numeric($pageId)) {
            $this->selector = $this->select()
                ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())
                ->where("module in ('adminpages') AND module_table in ('pagdivs')")
                ->where('parent_id = ?', $pageId)
                ->orWhere("module in ('adminpages') AND module_table in ('pagstructure') AND module_ids REGEXP ? > 0", '(.*)(^|,)' . $pageId . '(,|$)(.*)');

            $this->selector = $this->selector->order("timestamp DESC");
            $this->selector = $this->selector->limit($nbrActivities);
        } else {
            $this->selector = null;
        }

        return $this;
    }

    /**
     *
     * @param unknown_type $nbrActivities
     */
    public function getLastActivitiesForNews($nbrActivities = 5)
    {
        $this->selector = $this->select()
            ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())
            ->where("module in ('adminnews') AND module_table in ('nwsnews') ");

        $this->selector = $this->selector->order("timestamp DESC");
        $this->selector = $this->selector->limit($nbrActivities);

        return $this;

    }

    /**
     *
     * @param unknown_type $dbid
     * @param unknown_type $moduleName
     * @param unknown_type $moduleTable
     */
    public function getFirstEvent($dbid, $moduleName, $moduleTable)
    {
        $this->selector = $this->select()
            ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())
            ->where("module in ('$moduleName') AND module_table in ('$moduleTable') ")
            ->where("module_ids REGEXP '(.*)(^|,)" . $dbid . "(,|$)(.*)' > 0");

        $this->selector = $this->selector->order("timestamp ASC");
        $this->selector = $this->selector->limit(1);

        return $this;
    }

    /**
     *
     * @param unknown_type $dbid
     * @param unknown_type $moduleName
     * @param unknown_type $moduleTable
     */
    public function getLastEvent($dbid, $moduleName, $moduleTable)
    {
        $this->selector = $this->select()
            ->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId())
            ->where("module in ('$moduleName') AND module_table in ('$moduleTable') ")
            ->where("module_ids REGEXP '(.*)(^|,)" . $dbid . "(,|$)(.*)' > 0");

        $this->selector = $this->selector->order("timestamp DESC");
        $this->selector = $this->selector->limit(1);

        return $this;
    }

    /**
     *
     */
    public function reorderingForDashboard()
    {
        $activitiesNewList = array(
            'module' => array(),
            'action' => array(),
            'user'   => array(),
            'time'   => array(),
            'datas'  => array()
        );
        $activities = $this->fetchAll($this->getSelector());

        foreach ($activities as $activity) {
            $activity->timestamp = Sydney_Tools::getDate($activity->timestamp);

            $activitiesNewList['module'][$activity->module][] = $activity->id;
            $activitiesNewList['action'][$activity->action][] = $activity->id;
            $activitiesNewList['user'][$activity->fname . ' ' . $activity->lname] = $activity->id;
            $activitiesNewList['time'][Sydney_Tools::getDateDashboard($activity->timestamp)][] = $activity->id;

            $activitiesNewList['datas'][$activity->id] = $this->_translateSelector($activity);
        }

        return $activitiesNewList;
    }

    /**
     *
     */
    public function toObject()
    {
        $returnValue = new Zend_Db_Table_Rowset(array());
        if ($this->selector !== null) {
            $returnValue = $this->fetchAll($this->selector);
        }
        for ($i = 0; $i < count($returnValue); $i++) {
            $returnValue[$i] = $this->_translateSelector($returnValue[$i]);
        }

        return $returnValue;
    }

    /**
     *
     */
    public function toHtmlAuthor()
    {
        $event = $this->toObject();
        if ($event->current() != null) {
            return $html = '<strong>Created:</strong> ' . substr(Sydney_Tools::getDate($event->current()->timestamp), 0, -3) . ' by ' . $event->current()->fname . ' ' . $event->current()->lname . '';
        }
    }

    /**
     *
     */
    public function toHtmlLastEditor()
    {
        $event = $this->toObject();
        if ($event->current() != null) {
            return $html = '<strong>Last update:</strong> ' . substr(Sydney_Tools::getDate($event->current()->timestamp), 0, -3) . ' by ' . $event->current()->fname . ' ' . $event->current()->lname . '';
        }
    }

    /**
     *
     */
    public function getSelector()
    {
        return $this->selector;
    }

    public function setFilter($keyname, $value)
    {
        if (key_exists($keyname, $this->filter)) {
            $this->filter[$keyname] = $value;
        }
    }

    public function setFilterUser($value)
    {
        $this->setFilter('user', $value);
    }

    /**
     * Use the translation table for translating the trace.event in a
     * human readable format
     */
    protected function _translateSelector($activity)
    {
        $translate = $this->_translate;
        $activity['message'] = preg_replace_callback(
            "(^(.*)(trace.event.[A-z0-9_-]{1,60})(.*)$)",
            function ($m) use ($translate) {
                return $m[1] . $translate->_($m[2]) . $m[3];
            },
            $activity['message']
        );

        return $activity;
    }

}
