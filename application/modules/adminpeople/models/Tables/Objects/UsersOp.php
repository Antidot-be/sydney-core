<?php
/**
 * File generated by the Sydney_Admin_Generator on the Nov 2, 2009 1:55:37 PM by arnaud@antidot.ca
 */

/**
 * Mapping of the Users table in an object
 * @package Admindb
 * @subpackage ModelGenerated
 */
class UsersOp extends Sydney_Db_Table
{
    /**
     *
     * @var unknown_type
     */
    static $namesArray = array();
    /**
     *
     * @var unknown_type
     */
    protected $row = null;

    /**
     *
     */
    public static function getStringListOfUserForOrderList()
    {

        $safeinstance = new SafinstancesUsers();
        $safeinstanceSelector = $safeinstance->select()->from($safeinstance->getTableName(), 'users_id as id')->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId());
        $safeinstanceResult = $safeinstance->fetchAll($safeinstanceSelector)->toArray();

        $listUsers = Sydney_Tools::implode(', ', $safeinstanceResult);

        $users = new Users();
        $usersSelector = $users->select()->from($users->getTableName(), 'id')->where('id NOT IN (' . $listUsers . ')')->where('safinstances_id = ' . Sydney_Tools::getSafinstancesId());
        $usersResult = $users->fetchAll($usersSelector)->toArray();

        if (count($usersResult) > 0) {
            if (!empty($listUsers)) {
                $listUsers .= ', ';
            }
            $listUsers .= Sydney_Tools::implode(', ', $usersResult);
        }

        return $listUsers;

    }

    /**
     *
     * @param unknown_type $user_id
     * @param unknown_type $fileId
     */
    private static function linkAvatarToSystemFolder($fileId)
    {
        $objectFolder = new Filfolders;
        // get id of filfolders "adminpeople" and isSystemFolder "1"
        $rowFolder = $objectFolder->getFoldersByModule('adminpeople');
        $folderId = $rowFolder->id;

        // set new link to forlders "adminpeople" on "filfolders_filfiles"
        if ($folderId > 0) {
            $objectLinkFolder = new FilfoldersFilfiles;
            $objectLinkFolder->setFilfoldersLinkedTo($folderId, array($fileId), false);
        }
    }

    public function isValidPassword($newPassword, $userId = 0)
    {
        $currentUser = $userId > 0 ? new Users($userId) : $this;
        $passwordHistory = unserialize($currentUser->get()->lastpwdhistory);

        if (is_array($passwordHistory) && in_array(md5($newPassword), $passwordHistory)) {
            return false;
        }

        return true;
    }

    public function getUpdatedHistoryForDb()
    {
        return null;
    }

    public function changePassword($newPassword, $userId = 0)
    {
        $currentUser = $userId > 0 ? new Users($userId) : $this;

        return $currentUser->update(array(
                'password'       => md5($newPassword),
                'lastpwdchanges' => Sydney_Tools::getMySQLFormatedDate(),
                'lastpwdhistory' => $this->getUpdatedHistoryForDb($currentUser->get()->lastpwdhistory, $newPassword)
            ),
            'id = ' . $currentUser->get()->id);
    }

    /**
     *
     * @param unknown_type $userId
     * @param unknown_type $newAvatar
     */
    public static function changeAvatar($userId, $newAvatar = 0)
    {
        // save information into people table (users)
        $people = new Users;
        $rowPeople = $people->fetchRow("id = " . $userId);
        if (isset($rowPeople)) {

            // store old avatar
            $oldAvatar = $rowPeople->avatar;

            // update avatar
            $dataUsers = array('avatar' => $newAvatar);
            if (!$people->update($dataUsers, "id = " . $userId)) {
                return false;
            }

            // link avatar to system folder
            if ($newAvatar > 0) {
                self::linkAvatarToSystemFolder($newAvatar);
            }

            // if old avatar, check if another user has the same avatar
            if ($oldAvatar > 0) {
                // search avatar
                $select = $people->select()->where('avatar = ?', $oldAvatar);
                $rowsetPeople = $people->fetchAll($select);
                // if no avatar found, clean link between avatar and folder
                if (count($rowsetPeople) == 0) {
                    $objectFolder = new Filfolders;
                    // get id of filfolders "adminpeople" and isSystemFolder "1"
                    $rowFolder = $objectFolder->getFoldersByModule('adminpeople');

                    $objectLinkFolder = new FilfoldersFilfiles;
                    $objectLinkFolder->delete('filfiles_id = ' . $oldAvatar . ' AND filfolders_id = ' . $rowFolder->id);
                }
            }

            return true;
        }
    }

    /**
     *
     * @param unknown_type $id
     */
    public function getUserName($id)
    {
        if (!isset($namesArray[$id])) {
            if ($e = $this->find($id)->current()) {
                $namesArray[$id] = $e->fname;
                if (!empty($e->lname)) {
                    $namesArray[$id] .= ' ' . $e->lname;
                }
            } else {
                $namesArray[$id] = '-';
            }
        }

        return $namesArray[$id];
    }

    /**
     *
     * @param unknown_type $usersData
     * @param unknown_type $opts
     * @param unknown_type $returnSqlCount
     */
    public static function getSqlUserList($usersData, $opts = array(), $returnSqlCount = false)
    {
        $count = @$opts[2];
        $offset = @$opts[3];

        $select = "users.id ,
					users.fname ,
					users.lname ,
					users.email ,
					users.login ,
					users.phone ,
					users.cell ,
					users.active ,

					users.lastpwdchanges ,
					users.laststatuschange ,
					users.lastlogindate ,
					users.modifieddate ,
					users.unsubscribedate ,
					users.subscribedate ,

					users.usersgroups_id ,
					users.avatar ,
					usersgroups.name AS usersgroups_name";
        $from = "users 	LEFT JOIN safinstances_users ON (users.id = safinstances_users.users_id)
								, usersgroups ";

        // Where
        $where = "users.usersgroups_id = usersgroups.id AND
					( users.safinstances_id = " . Zend_Registry::get("config")->db->safinstances_id . " OR safinstances_users.safinstances_id = " . Zend_Registry::get("config")->db->safinstances_id . " )
					AND (1=1 " . $opts[0] . ")
					AND users.usersgroups_id IN (" . implode(',', $usersData['member_of_groups']) . ") ";
        $group = "GROUP BY users.id";
        $order = "ORDER BY lname,fname";

        // limit
        $limit = "";
        if ($count > 0 && !$returnSqlCount) {
            $limit = "LIMIT $offset , $count";
        }

        if ($returnSqlCount) {
            $select = "count(DISTINCT users.id) as cnt";
            $group = "";
            $order = "";
            $limit = "";
        }

        return "SELECT $select FROM $from WHERE $where $group $order $limit";
    }

    /**
     *
     * @param unknown_type $id
     * @param unknown_type $forceReload
     */
    public function get($id = 0, $forceReload = false)
    {
        if ($forceReload || ($id != 0 && ($this->row === null || $this->row->id != $id))) {
            $this->load($id);
        }

        return $this->row;
    }

    public function isLoginExist($login)
    {
        $select = $this->select()->where('login = ?', $login);
        $result = $this->fetchAll($select)->toArray();
        if (!empty($result)) {
            return $result[0]['id'];
        } else {
            return null;
        }
    }

    /**
     *
     * @param unknown_type $value
     */
    public function set($value)
    {
        if (is_object($value) && get_class($value) == 'Zend_Db_Table_Row') {
            $this->row = $value;
        } else {
            $this->load($value);
        }

        return $this;
    }

    /**
     *
     * @param integer $id
     */
    private function load($id)
    {
        $this->row = $this->find($id)->current();

        return $this;
    }

    /**
     *
     */
    public function getModule()
    {
        return 'adminpeople';
    }

    /**
     *
     */
    public function __toString()
    {
        return $this->get()->fname . ' ' . $this->get()->lname;
    }

    /**
     * (non-PHPdoc)
     * @see Sydney_Db_Table::getFieldLabel()
     */
    public function getFieldLabel()
    {
        return array('fname', 'lname');
    }

    /**
     * Returns a list of user being part of a list of groups
     *
     * @param array $groupIds Array of groups ids (usersgroups)
     * @param int $safinstancesId Safinstance id
     * @param boolean $idsOnly Should we return only an array of ids?
     * @return    array
     */
    public function getUsersFromaGroup(array $groupIds, $safinstancesId, $idsOnly = true)
    {
        $kindOfSearch = ' * ';
        if ($idsOnly) {
            $kindOfSearch = ' users.id AS id ';
        }
        $sql = "SELECT
				  " . $kindOfSearch . "
				FROM
				  users, safinstances_users
				WHERE
				 ( (safinstances_users.users_id = users.id AND safinstances_users.safinstances_id = '" . $safinstancesId . "')
				  OR users.safinstances_id = '" . $safinstancesId . "' )
				  AND users.usersgroups_id IN (" . implode(',', $groupIds) . ")";
        $requestResult = $this->_db->fetchAll($sql);
        if ($idsOnly) {
            $toReturn = array();
            foreach ($requestResult as $el) {
                $toReturn[] = $el['id'];
            }

            return $toReturn;
        } else {
            return $requestResult;
        }
    }

    public static function getForm($memberOfGroups = array(), $modeEdit = false, $isPublicModule = false)
    {
        $formClass = 'UsersFormOp';
        if ($isPublicModule) {
            if (!empty(Sydney_Tools::getConf('general')->form->profile)
                && @class_exists(Sydney_Tools::getConf('general')->form->profile)
            ) {
                $formClass = Sydney_Tools::getConf('general')->form->profile;
            } else {
                $formClass = 'UsersPublicForm';
            }
        }

        if (!is_array($memberOfGroups)) {
            $memberOfGroups = array($memberOfGroups);
        }
        $form = new $formClass(null, $memberOfGroups, $modeEdit);

        return $form;
    }

    public function confirm($id)
    {
        $data['active'] = 1;
        $data['valid'] = 1;
        $data['laststatuschange'] = Sydney_Tools::getMySQLFormatedDate();
        $data['lastlogindate'] = Sydney_Tools::getMySQLFormatedDate();

        if ($this->update($data, 'id = ' . $id)) {
            $objectParameter = new Parameters();
            $objectParameter->delete('users_id = ' . $id . '
							AND name = "mustBeConfirmedBefore"
						 	AND safinstances_id = ' . Sydney_Tools::getSafinstancesId());

            return true;
        }

        return false;
    }

    public function isEditMode($data)
    {
        if (isset($data['id']) && preg_match('/^[0-9]{1,10}$/', $data['id'])) {
            return true;
        }
    }

    private function addValidators($form, $data, $modeEdit = false)
    {
        // add special validator for password
        if (!empty($data['password']) || !empty($data['password2'])) {
            $form->password2->addValidator(new Zend_Validate_Identical($data['password']));
            $form->password->addValidator(new Zend_Validate_Identical($data['password2']));
        }

        // add special validator for login
        $checkUniqueLogin = false;
        if ($modeEdit) {
            $usersDB = new Users();
            $usersFounds = $usersDB->find($data['id']);
            if ($usersFounds[0]->login != $data['login']) {
                $checkUniqueLogin = true;
            }
        } else {
            $checkUniqueLogin = true;
        }

        if ($checkUniqueLogin && is_object($form->login)) {
            $form->login->addValidator(new Zend_Validate_Db_NoRecordExists(array(
                'table' => 'users',
                'field' => 'login'
            )));
        }

        return $form;
    }

    private function saveRow($data, $modeEdit, $isPublicModule)
    {
        try {
            $usersDb = new Users();
            if ($modeEdit) {
                $rows = $usersDb->fetchAll(" id = '" . $data['id'] . "' AND login = '" . addslashes($data['login']) . "' ");
                $row = $rows[0];
            } else {
                $row = $usersDb->createRow();
            }

            // Store row
            $this->set($row);

            foreach ($data as $k => $v) {
                if (isset($data[$k]) && isset($row->$k)) {
                    switch ($k) {
                        case 'password':
                            if (!empty($data[$k])) {
                                if (!$this->isValidPassword($data[$k], $data['id'])) {
                                    Sydney_Messages::getInstance()->addMessage(Sydney_Tools::_('Please use another password!'));

                                    return false;
                                }
                                $row->lastpwdhistory = $this->getUpdatedHistoryForDb($row->lastpwdhistory, $data[$k]);
                                $row->$k = md5($data[$k]);
                                $row->lastpwdchanges = Sydney_Tools::getMySQLFormatedDate();
                                $row->timeValidityPassword = 0;
                            }
                            break;
                        case 'valid' :
                            if ($row->$k != $data[$k]) {
                                $row->laststatuschange = Sydney_Tools::getMySQLFormatedDate();
                                if ($row->$k == 1) {
                                    $row->unsubscribedate = Sydney_Tools::getMySQLFormatedDate();
                                }
                            }
                            $row->$k = $data[$k];
                            break;
                        case 'active' :
                            if ($row->$k != $data[$k]) {
                                $row->laststatuschange = Sydney_Tools::getMySQLFormatedDate();
                                if ($row->$k == 1) {
                                    $row->unsubscribedate = Sydney_Tools::getMySQLFormatedDate();
                                }
                            }
                            $row->$k = $data[$k];
                            break;
                        default :
                            $row->$k = $data[$k];
                            break;
                    }
                }
            }

            $creation = !($row->id > 0);

            // Store row
            $this->set($row);

            if (!$creation) {
                // in case we are editing
                $row->modifieddate = Sydney_Tools::getMySQLFormatedDate();
            } else {

                // fixed values if public creation
                if ($isPublicModule) {
                    $row->usersgroups_id = 2; // User is added to group 'auth'
                    $row->active = 0; // User is not active
                }

                // in case we are creating
                $usersData = Sydney_Tools::getUserdata();

                $row->subscribedate = Sydney_Tools::getMySQLFormatedDate();
                $row->modifieddate = Sydney_Tools::getMySQLFormatedDate();
                $row->safinstances_id = Sydney_Tools::getSafinstancesId();
                $row->creatoridentity = ($usersData) ? $usersData['users_id'] : 0;
                $row->ip = $_SERVER['REMOTE_ADDR'];
            }

            if ($newId = $row->save()) {
                Sydney_Messages::getInstance()->addMessage('Success! The data is valid.');
                $row->id = $newId;

                // Store row
                $this->set($row);

                if ($creation) {
                    // create the link to cor table
                    $corDb = new SafinstancesUsers();
                    $corRow = $corDb->createRow();
                    $corRow->safinstances_id = Sydney_Tools::getSafinstancesId();
                    $corRow->users_id = $row->id;
                    $corRow->save();
                }

                return $row;
            } else {
                Sydney_Messages::getInstance()->addMessage('Error...');

                return false;
            }
        } catch (Exception $e) {
            Sydney_Messages::getInstance()->addMessage('UsersOp::save::Exception! ' . $e->getMessage());

            return false;
        }
    }

    public function registermail($to,
                                 $mailSubject,
                                 array $row,
                                 $confirmationAction = '/publicms/profile/confirm/init/2',
                                 $generatePassword = false,
                                 array $partialMailConfirm = array(
                                     'profile/mailconfirm.phtml',
                                     'publicms'
                                 ),
                                 array $partialMailPassword = array(
                                     'profile/mailpassword.phtml',
                                     'publicms'
                                 )
    )
    {

        // Init
        $data = $row; //->toArray();

        // Mail content
        $objectByPass = new Sydney_Auth_Bypass;
        $sBypass = $objectByPass->get($row['id']);
        $data['link_confirmation'] = Sydney_Tools::getConf('general')->siteDomain . $confirmationAction . '/passid/' . $row['id'] . '/pass/' . $sBypass;

        if (empty($mailSubject)) {
            $mailSubject = 'Confirmation ' . Sydney_Tools::getConf('general')->siteTitle;
        }
        if (count($partialMailConfirm) >= 2) {
            $view = new Zend_View();
            $tmsg = $view->partial($partialMailConfirm[0], $partialMailConfirm[1], array('data' => $data));
            if (array_key_exists(2, $partialMailConfirm) && !empty($partialMailConfirm[2])) {
                $mailSubject = $partialMailConfirm[2];
            }
        } else {
            $view = new Zend_View();
            $tmsg = $view->partial('profile/mailconfirm.phtml', 'publicms', array('data' => $data));
        }

        $mail = new Zend_Mail('UTF-8');
        $mail->setBodyHtml($tmsg);
        $mail->setFrom(Sydney_Tools::getConf('general')->siteEmail, Sydney_Tools::getConf('general')->siteTitle);
        $mail->addTo($to, $to);
        $mail->setSubject($mailSubject);
        $mail->send();

        if ($generatePassword) {
            // Change password
            $data['password'] = Sydney_Tools_Security::generatePassword($length = 8, $use_lower = true, $use_upper = true, $use_number = true, $use_custom = '');
            $user = new Users($row->id);
            $user->changePassword($data['password'], $row->id);

            // Send informations by email
            $view = new Zend_View();
            $tmsg = $view->partial($partialMailPassword[0], $partialMailPassword[1], array('data' => $data));

            // Mailer
            $mail = new Zend_Mail('UTF-8');
            $mail->setBodyHtml($tmsg);
            $mail->setFrom(Sydney_Tools::getConf('general')->siteEmail, Sydney_Tools::getConf('general')->siteTitle);
            $mail->addTo($row->login, $row->login);
            $mail->setSubject($mailSubject);
            $mail->send();
        }

        //}
    }

    /**
     * Update or Create user on table users
     *
     * @param array $data
     * @param boolean $isPublicModule
     * @param array $partialMailConfirm array('controller/action.phtml','module'[,subject])
     */
    public function save(array $data, $isPublicModule = false)
    {
        // Detect mode
        $modeEdit = $this->isEditMode($data);

        // Get datas of connected user
        $usersData = Sydney_Tools::getUserdata();

        // Set a custom form user on publicms if exist for the current instance
        $form = $this->getForm($usersData['member_of_groups'], $modeEdit, $isPublicModule);

        // add special validator for password / login
        $form = $this->addValidators($form, $data, $modeEdit);

        // Check validity
        if (!$form->isValid($data)) {
            Sydney_Messages::getInstance()->addMessage($form->getMessages());

            return false;
        } else {
            $this->saveRow($data, $modeEdit, $isPublicModule);
        } // END - IF VALID FORM

        return true;
    }

    /**
     * Checks if this email is a valid and authorized user for the safinstance
     * @param string $email Email
     * @param int $safinstancesId Safinstances_id
     *
     * @return boolean True if valid, false if not
     */
    public function isEmailAvalidUser($email = '', $safinstancesId = null)
    {
        if ($safinstancesId == null) {
            $safinstancesId = Sydney_Tools::getSafinstancesId();
        }
        $sql = "
			SELECT
			  count(login) AS nbrusers
			FROM
			  users LEFT JOIN safinstances_users ON safinstances_users.users_id = users.id
			WHERE
			( safinstances_users.safinstances_id = '" . $safinstancesId . "' OR
			  users.safinstances_id = '" . $safinstancesId . "' )
			AND ( users.email='" . $email . "' OR
			      users.login='" . $email . "' )
			AND users.valid = 1
			AND users.active = 1
		";
        $result = $this->_db->fetchAll($sql);

        return (count($result) > 0 && isset($result[0]['nbrusers']) && $result[0]['nbrusers'] > 0);
    }
}
